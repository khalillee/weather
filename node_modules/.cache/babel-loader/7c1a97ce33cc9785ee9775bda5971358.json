{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\nvar authorizationKey = 'CWB-2A566626-C484-46C0-82B8-0AE7A8259D76';\n\nvar fetchCurrentWeather = function fetchCurrentWeather(locationName) {\n  return fetch(\"https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=\".concat(authorizationKey, \"&locationName=\").concat(locationName)).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    var locationData = data.records.location[0];\n    var weatherElements = locationData.weatherElement.reduce(function (neededElements, item) {\n      if (['WDSD', 'TEMP', 'HUMD'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.elementValue;\n      }\n\n      return neededElements;\n    }, {});\n    return {\n      observationTime: locationData.time.obsTime,\n      locationName: locationData.locationName,\n      temperature: weatherElements.TEMP,\n      windSpeed: weatherElements.WDSD,\n      humid: weatherElements.HUMD\n    };\n  });\n};\n\nvar fetchWeatherForecast = function fetchWeatherForecast(cityName) {\n  return fetch(\"https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=\".concat(authorizationKey, \"&locationName=\").concat(cityName)).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    var locationData = data.records.location[0];\n    var weatherElements = locationData.weatherElement.reduce(function (neededElements, item) {\n      if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.time[0].parameter;\n      }\n\n      return neededElements;\n    }, {});\n    return {\n      description: weatherElements.Wx.parameterName,\n      weatherCode: weatherElements.Wx.parameterValue,\n      rainPossibility: weatherElements.PoP.parameterName,\n      comfortability: weatherElements.CI.parameterName\n    };\n  });\n};\n\nvar useWeatherApi = function useWeatherApi(currentLocation) {\n  var locationName = currentLocation.locationName,\n      cityName = currentLocation.cityName;\n\n  var _useState = useState({\n    observationTime: new Date(),\n    locationName: '',\n    humid: 0,\n    temperature: 0,\n    windSpeed: 0,\n    description: '',\n    weatherCode: 0,\n    rainPossibility: 0,\n    comfortability: '',\n    isLoading: true\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      weatherElement = _useState2[0],\n      setWeatherElement = _useState2[1];\n\n  var fetchData = useCallback(function () {\n    var fetchingData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$Promise$all, _yield$Promise$all2, currentWeather, weatherForecast;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([fetchCurrentWeather(locationName), fetchWeatherForecast(cityName)]);\n\n              case 2:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                currentWeather = _yield$Promise$all2[0];\n                weatherForecast = _yield$Promise$all2[1];\n                setWeatherElement(_objectSpread(_objectSpread(_objectSpread({}, currentWeather), weatherForecast), {}, {\n                  isLoading: false\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchingData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    setWeatherElement(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        isLoading: true\n      });\n    });\n    fetchingData();\n  }, [locationName, cityName]);\n  useEffect(function () {\n    fetchData();\n  }, [fetchData]);\n  return [weatherElement, fetchData];\n};\n\nexport default useWeatherApi;","map":{"version":3,"sources":["C:/Users/user/khalil-weather/realtime-weather-app/src/useWeatherApi.js"],"names":["useState","useEffect","useCallback","authorizationKey","fetchCurrentWeather","locationName","fetch","then","response","json","data","locationData","records","location","weatherElements","weatherElement","reduce","neededElements","item","includes","elementName","elementValue","observationTime","time","obsTime","temperature","TEMP","windSpeed","WDSD","humid","HUMD","fetchWeatherForecast","cityName","parameter","description","Wx","parameterName","weatherCode","parameterValue","rainPossibility","PoP","comfortability","CI","useWeatherApi","currentLocation","Date","isLoading","setWeatherElement","fetchData","fetchingData","Promise","all","currentWeather","weatherForecast","prevState"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nconst authorizationKey = 'CWB-2A566626-C484-46C0-82B8-0AE7A8259D76';\nconst fetchCurrentWeather = (locationName) => {\n  return fetch(\n    `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}`,\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      const locationData = data.records.location[0];\n\n      const weatherElements = locationData.weatherElement.reduce(\n        (neededElements, item) => {\n          if (['WDSD', 'TEMP', 'HUMD'].includes(item.elementName)) {\n            neededElements[item.elementName] = item.elementValue;\n          }\n          return neededElements;\n        },\n        {},\n      );\n\n      return {\n        observationTime: locationData.time.obsTime,\n        locationName: locationData.locationName,\n        temperature: weatherElements.TEMP,\n        windSpeed: weatherElements.WDSD,\n        humid: weatherElements.HUMD,\n      };\n    });\n};\n\nconst fetchWeatherForecast = (cityName) => {\n  return fetch(\n    `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`,\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      const locationData = data.records.location[0];\n      const weatherElements = locationData.weatherElement.reduce(\n        (neededElements, item) => {\n          if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n            neededElements[item.elementName] = item.time[0].parameter;\n          }\n          return neededElements;\n        },\n        {},\n      );\n\n      return {\n        description: weatherElements.Wx.parameterName,\n        weatherCode: weatherElements.Wx.parameterValue,\n        rainPossibility: weatherElements.PoP.parameterName,\n        comfortability: weatherElements.CI.parameterName,\n      };\n    });\n};\n\nconst useWeatherApi = (currentLocation) => {\n  const { locationName, cityName } = currentLocation;\n  const [weatherElement, setWeatherElement] = useState({\n    observationTime: new Date(),\n    locationName: '',\n    humid: 0,\n    temperature: 0,\n    windSpeed: 0,\n    description: '',\n    weatherCode: 0,\n    rainPossibility: 0,\n    comfortability: '',\n    isLoading: true,\n  });\n\n  const fetchData = useCallback(() => {\n    const fetchingData = async () => {\n      const [currentWeather, weatherForecast] = await Promise.all([\n        fetchCurrentWeather(locationName),\n        fetchWeatherForecast(cityName),\n      ]);\n\n      setWeatherElement({\n        ...currentWeather,\n        ...weatherForecast,\n        isLoading: false,\n      });\n    };\n\n    setWeatherElement((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }));\n\n    fetchingData();\n  }, [locationName, cityName]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return [weatherElement, fetchData];\n};\n\nexport default useWeatherApi;\n"]},"metadata":{},"sourceType":"module"}