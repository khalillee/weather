{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\khalil-weather\\\\realtime-weather-app\\\\src\\\\WeatherApp.js\";\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\nvar theme = {\n  light: {\n    backgroundColor: '#121416',\n    foregroundColor: '#121416',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  },\n  dark: {\n    backgroundColor: '#121416',\n    foregroundColor: '#121416',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  }\n};\nvar Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: 100%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\"])), function (_ref) {\n  var theme = _ref.theme;\n  return theme.backgroundColor;\n});\n\nvar getMoment = function getMoment(locationName) {\n  var location = sunriseAndSunsetData.find(function (data) {\n    return data.locationName === locationName;\n  });\n  if (!location) return null;\n  var now = new Date();\n  var nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  }).format(now).replace(/\\//g, '-');\n  var locationDate = location.time && location.time.find(function (time) {\n    return time.dataTime === nowDate;\n  });\n  var sunriseTimestamp = new Date(\"\".concat(locationDate.dataTime, \" \").concat(locationDate.sunrise)).getTime();\n  var sunsetTimestamp = new Date(\"\".concat(locationDate.dataTime, \" \").concat(locationDate.sunset)).getTime();\n  var nowTimeStamp = now.getTime();\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? 'day' : 'night';\n};\n\nvar WeatherApp = function WeatherApp() {\n  console.log('--- invoke function component ---');\n\n  var _useState = useState('新北市'),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentCity = _useState2[0],\n      setCurrentCity = _useState2[1];\n\n  var currentLocation = findLocation(currentCity) || {};\n\n  var _useWeatherApi = useWeatherApi(currentLocation),\n      _useWeatherApi2 = _slicedToArray(_useWeatherApi, 2),\n      weatherElement = _useWeatherApi2[0],\n      fetchData = _useWeatherApi2[1];\n\n  var _useState3 = useState('light'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentTheme = _useState4[0],\n      setCurrentTheme = _useState4[1];\n\n  var _useState5 = useState('WeatherCard'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentPage = _useState6[0],\n      setCurrentPage = _useState6[1];\n\n  var moment = useMemo(function () {\n    return getMoment(currentLocation.sunriseCityName);\n  }, [currentLocation.sunriseCityName]);\n  useEffect(function () {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n  useEffect(function () {\n    localStorage.setItem('cityName', currentCity);\n  }, [currentCity]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme[currentTheme],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, currentPage === 'WeatherCard' && /*#__PURE__*/React.createElement(WeatherCard, {\n    cityName: currentLocation.cityName,\n    weatherElement: weatherElement,\n    moment: moment,\n    fetchData: fetchData,\n    setCurrentPage: setCurrentPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }), currentPage === 'WeatherSetting' && /*#__PURE__*/React.createElement(WeatherSetting, {\n    cityName: currentLocation.cityName,\n    setCurrentCity: setCurrentCity,\n    setCurrentPage: setCurrentPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/user/khalil-weather/realtime-weather-app/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","styled","ThemeProvider","WeatherCard","useWeatherApi","sunriseAndSunsetData","WeatherSetting","findLocation","theme","light","backgroundColor","foregroundColor","titleColor","temperatureColor","textColor","dark","Container","div","getMoment","locationName","location","find","data","now","Date","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","getTime","sunsetTimestamp","sunset","nowTimeStamp","WeatherApp","console","log","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","localStorage","setItem","cityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { ThemeProvider } from 'emotion-theming';\r\nimport WeatherCard from './WeatherCard';\r\nimport useWeatherApi from './useWeatherApi';\r\nimport sunriseAndSunsetData from './sunrise-sunset.json';\r\nimport WeatherSetting from './WeatherSetting';\r\nimport { findLocation } from './utils';\r\n\r\nconst theme = {\r\n  light: {\r\n    backgroundColor: '#121416',\r\n    foregroundColor: '#121416',\r\n    titleColor: '#f9f9fa',\r\n    temperatureColor: '#dddddd',\r\n    textColor: '#cccccc',\r\n  },\r\n  dark: {\r\n    backgroundColor: '#121416',\r\n    foregroundColor: '#121416',\r\n    titleColor: '#f9f9fa',\r\n    temperatureColor: '#dddddd',\r\n    textColor: '#cccccc',\r\n  },\r\n};\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.backgroundColor};\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst getMoment = (locationName) => {\r\n  const location = sunriseAndSunsetData.find(\r\n    (data) => data.locationName === locationName,\r\n  );\r\n\r\n  if (!location) return null;\r\n\r\n  const now = new Date();\r\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n  })\r\n    .format(now)\r\n    .replace(/\\//g, '-');\r\n\r\n  const locationDate =\r\n    location.time && location.time.find((time) => time.dataTime === nowDate);\r\n  const sunriseTimestamp = new Date(\r\n    `${locationDate.dataTime} ${locationDate.sunrise}`,\r\n  ).getTime();\r\n  const sunsetTimestamp = new Date(\r\n    `${locationDate.dataTime} ${locationDate.sunset}`,\r\n  ).getTime();\r\n  const nowTimeStamp = now.getTime();\r\n\r\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\r\n    ? 'day'\r\n    : 'night';\r\n};\r\n\r\nconst WeatherApp = () => {\r\n  console.log('--- invoke function component ---');\r\n  const [currentCity, setCurrentCity] = useState('新北市');\r\n  const currentLocation = findLocation(currentCity) || {};\r\n\r\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\r\n\r\n  const [currentTheme, setCurrentTheme] = useState('light');\r\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\r\n\r\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\r\n    currentLocation.sunriseCityName,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\r\n  }, [moment]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('cityName', currentCity);\r\n  }, [currentCity]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme[currentTheme]}>\r\n      <Container>\r\n        {currentPage === 'WeatherCard' && (\r\n          <WeatherCard\r\n            cityName={currentLocation.cityName}\r\n            weatherElement={weatherElement}\r\n            moment={moment}\r\n            fetchData={fetchData}\r\n            setCurrentPage={setCurrentPage}\r\n          />\r\n        )}\r\n\r\n        {currentPage === 'WeatherSetting' && (\r\n          <WeatherSetting\r\n            cityName={currentLocation.cityName}\r\n            setCurrentCity={setCurrentCity}\r\n            setCurrentPage={setCurrentPage}\r\n          />\r\n        )}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"]},"metadata":{},"sourceType":"module"}